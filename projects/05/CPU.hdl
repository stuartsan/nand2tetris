// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //Route first mux to output instruction if A instruction, else alu output
    Mux16(a=instruction, b=aluout1, out=muxout1, sel=instruction[15]);

    //Pipe mux output into A reg.
    //Set load bit to true if A instruction OR if C instruction and d1 bit is true
    //Which means the computation's destination is the A register
    //Pipe output directly into CPU addressM output, also fan out to PC and a mux
    And(a=instruction[15], b=instruction[5], out=andout1);
    Not(in=instruction[15], out=instructiona);
    Or(a=instructiona, b=andout1, out=orout1);
    ARegister(in=muxout1, load=orout1, out=aregout1, out[0..14]=aregout2, out[0..14]=addressM);

    //Pipe A's output into a mux that decides the output based on the A bit
    //of the C instruction
    Mux16(a=aregout1, b=inM, sel=instruction[12], out=muxout2);

    //Load D register based on instruction C bit d2
    //And it being a C instruction
    And(a=instruction[4], b=instruction[15], out=andout7);
    DRegister(in=aluout2, load=andout7, out=dregout1);
    
    //Pipe in either A||M as well as D into the ALU.
    //For control bits pull in all six C bits of the C instruction.
    //Output to CPU outM and fan out into D and the first mux which leads to A
    //Output control bits into...
    ALU(x=dregout1, y=muxout2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=aluout1, out=aluout2, zr=zrout1, zr=zrout2, ng=ngout1, ng=ngout2);

    //If d3 bit == 1 , writeM is true
    And(a=instruction[3], b=instruction[15], out=writeM);

    //Pipe A's output into PC, with various control bits
    //Prepare load input by processing logic of jump bits + ALU control bit outputs
    And(a=zrout1, b=instruction[1], out=andout2);
    And(a=ngout1, b=instruction[2], out=andout3);
    Not(in=zrout2, out=notzr);
    Not(in=ngout2, out=notng);
    And(a=notzr, b=notng, out=andout4);
    And(a=andout4, b=instruction[0], out=andout5);
    Or(a=andout2, b=andout3, out=orout2);
    Or(a=orout2, b=andout5, out=orout3);
    //Finally, to load, those conditions must be satisfied and it must
    //be a C instruction
    And(a=orout3, b=instruction[15], out=andout6);

    //Load bit is true if any jump conditions above match the ALU output control bits
    PC(in[0..14]=aregout2, load=andout6, inc=true, reset=reset, out[0..14]=pc);

}